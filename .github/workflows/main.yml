name: Test, E2E, and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_DEFAULT_REGION: eu-west-2
  LIGHTSAIL_SERVICE_NAME: container-service-2

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   env:
  #     DATABASE_URL: postgres://thuppertz:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/mental_health_tracker_db
  #     JWT_SECRET: ${{ secrets.JWT_SECRET }}
  #     PORT: 3005
  #     CI: true
  #     NODE_ENV: test
  #     VITE_BACKEND_URL: http://localhost:3005/api/trpc
  #     PLAYWRIGHT_TEST_BASE_URL: http://localhost:3005
  #     POSTGRES_DB: mental_health_tracker_db
  #     POSTGRES_USER: thuppertz
  #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  #   services:
  #     postgres:
  #       image: postgres:16.1-alpine
  #       env:
  #         POSTGRES_DB: mental_health_tracker_db
  #         POSTGRES_USER: thuppertz
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Use Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20.x"

  #     - name: Install root dependencies
  #       run: npm ci

  #     # Server-side checks
  #     - name: Install server dependencies
  #       run: npm ci
  #       working-directory: ./packages/server

  #     - name: Run server lint
  #       run: npm run lint
  #       working-directory: ./packages/server

  #     - name: Run server type check
  #       run: npm run type-check
  #       working-directory: ./packages/server

  #     - name: Run database migrations
  #       run: npm run migrate:latest
  #       working-directory: ./packages/server

  #     - name: Run server tests
  #       run: npm run test
  #       working-directory: ./packages/server

  #     # Add client-side checks and E2E tests here if needed

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Setup AWS CLI and Lightsail
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Build server image
        run: |
          echo "Building server image..."
          docker build -t server-${{ github.sha }} -f ./packages/server/Dockerfile ./packages/server
          echo "Server image built successfully"

      - name: Push server image to Lightsail
        run: |
          echo "Pushing server image to Lightsail..."
          aws lightsail push-container-image --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --label "server-${{ github.sha }}" --image "server-${{ github.sha }}"
          echo "Server image pushed successfully"

      - name: Check for ongoing deployments
        id: check_deployment
        run: |
          echo "Checking for ongoing deployments..."
          DEPLOYMENT_STATUS=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} | jq -r '.containerServices[0].currentDeployment.state')
          if [ "$DEPLOYMENT_STATUS" = "ACTIVATING" ]; then
            echo "ongoing_deployment=true" >> $GITHUB_OUTPUT
            echo "An ongoing deployment was found. Will wait for it to complete."
          else
            echo "ongoing_deployment=false" >> $GITHUB_OUTPUT
            echo "No ongoing deployment found. Proceeding with new deployment."
          fi

      - name: Wait for ongoing deployment
        if: steps.check_deployment.outputs.ongoing_deployment == 'true'
        run: |
          echo "Waiting for ongoing deployment to complete..."
          while true; do
            DEPLOYMENT_STATUS=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} | jq -r '.containerServices[0].currentDeployment.state')
            if [ "$DEPLOYMENT_STATUS" != "ACTIVATING" ]; then
              echo "Ongoing deployment completed. Proceeding with new deployment."
              break
            fi
            echo "Deployment still in progress. Waiting..."
            sleep 30
          done

      - name: Check Lightsail container service configuration
        run: |
          echo "Checking Lightsail container service configuration..."
          aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} | jq '.'
          echo "Configuration check complete"

      - name: Check Lightsail Container Service Capacity
        run: |
          echo "Checking Lightsail Container Service capacity..."
          SERVICE_INFO=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }})
          echo "$SERVICE_INFO" | jq '.containerServices[0] | {power, scale, state, isDisabled}'

          POWER=$(echo "$SERVICE_INFO" | jq -r '.containerServices[0].power')
          SCALE=$(echo "$SERVICE_INFO" | jq -r '.containerServices[0].scale')

          echo "Current power: $POWER"
          echo "Current scale: $SCALE"

          if [ "$POWER" = "nano" ] || [ "$SCALE" -lt 1 ]; then
            echo "Warning: Container service may not have sufficient resources. Consider upgrading power or increasing scale."
          fi

      - name: Deploy to Lightsail
        run: |
          echo "Deploying server and database to Lightsail..."
          DEPLOY_OUTPUT=$(aws lightsail create-container-service-deployment \
          --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
          --containers '{
            "server": {
              "image": "server-${{ github.sha }}",
              "ports": {"3005": "HTTP"},
              "environment": {
                "DATABASE_URL": "${{ secrets.PROD_DATABASE_URL }}",
                "JWT_SECRET": "${{ secrets.PROD_JWT_SECRET }}",
                "PORT": "3005",
                "NODE_ENV": "production"
              }
            },
            "db": {
              "image": "postgres:13",
              "ports": {"5432": "TCP"},
              "environment": {
                "POSTGRES_DB": "${{ secrets.PROD_DB_NAME }}",
                "POSTGRES_USER": "${{ secrets.PROD_DB_USER }}",
                "POSTGRES_PASSWORD": "${{ secrets.PROD_DB_PASSWORD }}"
              }
            }
          }' \
          --public-endpoint '{
            "containerName": "server",
            "containerPort": 3005,
            "healthCheck": {
              "path": "/health",
              "intervalSeconds": 10
            }
          }' 2>&1)

          DEPLOY_EXIT_CODE=$?
          echo "Deployment command output:"
          echo "$DEPLOY_OUTPUT"

          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "Deployment failed with exit code $DEPLOY_EXIT_CODE"
            echo "Checking Lightsail service status..."
            aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} | jq '.'
            exit 1
          else
            echo "Deployment command executed successfully"
          fi

      - name: Check deployment status
        run: |
          echo "Checking deployment status..."
          DEPLOYMENT_INFO=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }})
          echo "$DEPLOYMENT_INFO" | jq '.'

          SERVICE_STATE=$(echo "$DEPLOYMENT_INFO" | jq -r '.containerServices[0].state')
          NEXT_DEPLOYMENT=$(echo "$DEPLOYMENT_INFO" | jq -r '.containerServices[0].nextDeployment')

          if [ "$SERVICE_STATE" = "DEPLOYING" ]; then
            echo "Deployment is in progress. Current state: $SERVICE_STATE"
            echo "Next deployment details:"
            echo "$NEXT_DEPLOYMENT" | jq '.'
          elif [ "$NEXT_DEPLOYMENT" != "null" ]; then
            echo "New deployment is queued. Details:"
            echo "$NEXT_DEPLOYMENT" | jq '.'
          else
            echo "No active deployment found. Service state: $SERVICE_STATE"
            exit 1
          fi

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          TIMEOUT=1800  # 30 minutes timeout
          START_TIME=$SECONDS
          PREVIOUS_STATUS=""
          READY_COUNT=0
          while true; do
            ELAPSED_TIME=$((SECONDS - START_TIME))
            if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
              echo "Deployment timed out after 30 minutes"
              exit 1
            fi
            
            SERVICE_INFO=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }})
            STATUS=$(echo $SERVICE_INFO | jq -r '.containerServices[0].state')
            CURRENT_DEPLOYMENT=$(echo $SERVICE_INFO | jq -r '.containerServices[0].currentDeployment')
            NEXT_DEPLOYMENT=$(echo $SERVICE_INFO | jq -r '.containerServices[0].nextDeployment')
            
            echo "Current status: $STATUS"
            echo "Elapsed time: $ELAPSED_TIME seconds"
            
            if [ "$STATUS" = "RUNNING" ]; then
              echo "Deployment completed successfully"
              echo "Current deployment details:"
              echo "$CURRENT_DEPLOYMENT" | jq '.'
              break
            elif [ "$STATUS" = "READY" ]; then
              READY_COUNT=$((READY_COUNT + 1))
              echo "Service is READY. Checking container states:"
              CONTAINERS=$(echo $CURRENT_DEPLOYMENT | jq -r '.containers')
              echo "$CONTAINERS" | jq '.'
              
              if [ "$CONTAINERS" = "null" ] || [ -z "$CONTAINERS" ]; then
                echo "Container information not available."
                if [ $READY_COUNT -ge 5 ]; then
                  echo "Container information still not available after multiple checks. Fetching detailed logs..."
                  aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name server
                  aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name db
                  echo "Deployment seems stuck. Please check the Lightsail console for more information."
                  exit 1
                fi
              else
                SERVER_STATE=$(echo $CONTAINERS | jq -r '.server.state // "N/A"')
                DB_STATE=$(echo $CONTAINERS | jq -r '.db.state // "N/A"')
                echo "Server container state: $SERVER_STATE"
                echo "Database container state: $DB_STATE"
                
                if [ "$SERVER_STATE" = "RUNNING" ] && [ "$DB_STATE" = "RUNNING" ]; then
                  echo "All containers are running. Deployment successful."
                  break
                fi
              fi
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Deployment failed. Service info:"
              echo "$SERVICE_INFO" | jq '.'
              aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name server
              aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name db
              exit 1
            fi
            
            sleep 30
          done

      - name: Check Container Health
        if: success()
        run: |
          echo "Checking container health..."
          SERVICE_INFO=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }})
          CONTAINERS=$(echo $SERVICE_INFO | jq -r '.containerServices[0].currentDeployment.containers')

          if [ "$CONTAINERS" = "null" ] || [ -z "$CONTAINERS" ]; then
            echo "Container information not available. Deployment may have failed."
            exit 1
          fi

          echo "Container information:"
          echo "$CONTAINERS" | jq '.'

          SERVER_STATE=$(echo $CONTAINERS | jq -r '.server.state // "N/A"')
          DB_STATE=$(echo $CONTAINERS | jq -r '.db.state // "N/A"')

          echo "Server container state: $SERVER_STATE"
          echo "Database container state: $DB_STATE"

          if [ "$SERVER_STATE" != "RUNNING" ] || [ "$DB_STATE" != "RUNNING" ]; then
            echo "One or more containers are not in the RUNNING state"
            aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name server
            aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name db
            exit 1
          fi

      - name: Verify Lightsail service health
        if: success()
        run: |
          echo "Verifying Lightsail service health..."
          SERVICE_INFO=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }})
          echo "$SERVICE_INFO" | jq '.'

          PUBLIC_ENDPOINT=$(echo $SERVICE_INFO | jq -r '.containerServices[0].url')
          if [ -n "$PUBLIC_ENDPOINT" ]; then
            echo "Checking public endpoint: $PUBLIC_ENDPOINT"
            curl -sSf "${PUBLIC_ENDPOINT}/health" || (echo "Health check failed" && exit 1)
            echo "Health check passed"
          else
            echo "Public endpoint not available"
            exit 1
          fi

      - name: Check IAM permissions
        run: |
          echo "Checking IAM permissions..."
          aws iam get-user
          aws iam simulate-principal-policy --policy-source-arn $(aws iam get-user --query 'User.Arn' --output text) --action-names lightsail:GetContainerServices lightsail:CreateContainerServiceDeployment lightsail:GetContainerServiceDeployments lightsail:GetContainerLog lightsail:GetContainerServiceMetricData lightsail:GetContainerImages lightsail:PushContainerImage lightsail:RegisterContainerImage
          echo "IAM permissions check complete"

      - name: Get Lightsail container logs
        if: always()
        run: |
          echo "Fetching server logs..."
          aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name server || echo "Failed to retrieve server logs"
          echo "Fetching database logs..."
          aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name db || echo "Failed to retrieve database logs"

      - name: Check deployment details
        if: failure()
        run: |
          echo "Fetching detailed deployment information..."
          aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} | jq '.'
