name: Test, E2E, and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_DEFAULT_REGION: eu-west-2
  LIGHTSAIL_SERVICE_NAME: container-service-1

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   env:
  #     DATABASE_URL: postgres://thuppertz:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/mental_health_tracker_db
  #     JWT_SECRET: ${{ secrets.JWT_SECRET }}
  #     PORT: 3005
  #     CI: true
  #     NODE_ENV: test
  #     VITE_BACKEND_URL: http://localhost:3005/api/trpc
  #     PLAYWRIGHT_TEST_BASE_URL: http://localhost:3005
  #     POSTGRES_DB: mental_health_tracker_db
  #     POSTGRES_USER: thuppertz
  #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  #   services:
  #     postgres:
  #       image: postgres:16.1-alpine
  #       env:
  #         POSTGRES_DB: mental_health_tracker_db
  #         POSTGRES_USER: thuppertz
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Use Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20.x"

  #     - name: Install root dependencies
  #       run: npm ci

  #     # Server-side checks
  #     - name: Install server dependencies
  #       run: npm ci
  #       working-directory: ./packages/server

  #     - name: Run server lint
  #       run: npm run lint
  #       working-directory: ./packages/server

  #     - name: Run server type check
  #       run: npm run type-check
  #       working-directory: ./packages/server

  #     - name: Run database migrations
  #       run: npm run migrate:latest
  #       working-directory: ./packages/server

  #     - name: Run server tests
  #       run: npm run test
  #       working-directory: ./packages/server

  #     # Add client-side checks and E2E tests here if needed

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Setup AWS CLI and Lightsail
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Build server image
        run: |
          echo "Building server image..."
          docker build -t server-${{ github.sha }} -f ./packages/server/Dockerfile ./packages/server
          echo "Server image built successfully"

      - name: Push server image to Lightsail
        run: |
          echo "Pushing server image to Lightsail..."
          aws lightsail push-container-image --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --label "server-${{ github.sha }}" --image "server-${{ github.sha }}"
          echo "Server image pushed successfully"

      - name: Deploy to Lightsail
        run: |
          echo "Deploying server and database to Lightsail..."
          aws lightsail create-container-service-deployment \
          --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
          --containers '{
            "server": {
              "image": "server-${{ github.sha }}",
              "ports": {"3005": "HTTP"},
              "environment": {
                "DATABASE_URL": "${{ secrets.PROD_DATABASE_URL }}",
                "JWT_SECRET": "${{ secrets.PROD_JWT_SECRET }}",
                "PORT": "3005",
                "NODE_ENV": "production"
              }
            },
            "db": {
              "image": "postgres:13",
              "ports": {"5432": "TCP"},
              "environment": {
                "POSTGRES_DB": "${{ secrets.PROD_DB_NAME }}",
                "POSTGRES_USER": "${{ secrets.PROD_DB_USER }}",
                "POSTGRES_PASSWORD": "${{ secrets.PROD_DB_PASSWORD }}"
              }
            }
          }' \
          --public-endpoint '{
            "containerName": "server",
            "containerPort": 3005,
            "healthCheck": {
              "path": "/health",
              "intervalSeconds": 10
            }
          }'
          echo "Deployment command executed"

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          TIMEOUT=1800  # 30 minutes timeout
          START_TIME=$SECONDS
          while true; do
            ELAPSED_TIME=$((SECONDS - START_TIME))
            if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
              echo "Deployment timed out after 30 minutes"
              exit 1
            fi

            SERVICE_INFO=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }})
            STATUS=$(echo $SERVICE_INFO | jq -r '.containerServices[0].state')
            CURRENT_DEPLOYMENT=$(echo $SERVICE_INFO | jq -r '.containerServices[0].currentDeployment')

            echo "Current status: $STATUS"
            echo "Elapsed time: $ELAPSED_TIME seconds"
            echo "Current deployment info:"
            echo "$CURRENT_DEPLOYMENT" | jq '.'

            if [ "$STATUS" = "RUNNING" ]; then
              echo "Deployment completed successfully"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Deployment failed. Full service info:"
              echo "$SERVICE_INFO" | jq '.'
              exit 1
            elif [ "$STATUS" = "READY" ]; then
              CONTAINERS_INFO=$(echo $CURRENT_DEPLOYMENT | jq -r '.containers')
              if [ "$CONTAINERS_INFO" != "null" ]; then
                echo "Container info available:"
                echo "$CONTAINERS_INFO" | jq '.'

                SERVER_STATE=$(echo $CONTAINERS_INFO | jq -r '.server.state // "N/A"')
                DB_STATE=$(echo $CONTAINERS_INFO | jq -r '.db.state // "N/A"')
                echo "Server container state: $SERVER_STATE"
                echo "Database container state: $DB_STATE"

                if [ "$SERVER_STATE" = "RUNNING" ] && [ "$DB_STATE" = "RUNNING" ]; then
                  echo "All containers are running. Deployment successful."
                  break
                fi
              else
                echo "Container info not available yet"
              fi
            fi

            sleep 30
          done

      - name: Get Lightsail container logs
        if: always()
        run: |
          echo "Fetching server logs..."
          aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name server || echo "Failed to retrieve server logs"
          echo "Fetching database logs..."
          aws lightsail get-container-log --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} --container-name db || echo "Failed to retrieve database logs"

      - name: Check deployment details
        if: failure()
        run: |
          echo "Fetching detailed deployment information..."
          aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} | jq '.'